<?xml version="1.0" encoding="UTF-8"?>
<mapping-configuration>
	<property  supportCover="false" supportDelete="false" extend="{'type':1}" />
	<procedure name="SET_AUTH_MENU_R_FLAG_PROC" >
		<![CDATA[ 
			CREATE PROC SET_AUTH_MENU_R_FLAG_PROC
				@AUTH_FLAG INT,
				@MENU_IDS VARCHAR(MAX),
				@AUTH_PERMISSION_TYPE VARCHAR(10),  
				@AUTH_PERMISSION_CONTENT VARCHAR(36),
				@AUTH_TYPE VARCHAR(20),
				@CREATE_USER_ID CHAR(36),
				@CREATE_DATE DATETIME,
				@PROJECT_CODE VARCHAR(50),
				@TENANT_ID CHAR(36),
				@MESSAGE VARCHAR(100) OUTPUT,
				@MESSAGE_TYPE VARCHAR(10) OUTPUT,
				@MESSAGE_AUTH_FLAG INT OUTPUT
			AS
			BEGIN
			DECLARE @TABLE_IDS TABLE (
				MENUS_ID VARCHAR(36) NOT NULL	
			)
			DECLARE @AUPE_ID VARCHAR(36)
			DECLARE @R_ALLOW_FLAG INT
			DECLARE @R_NOT_ALLOW_FLAG INT
			DECLARE @R_ALLOW_UPDATE_FLAG INT
			DECLARE @R_NOT_ALLOW_UPDATE_FLAG INT
			INSERT INTO @TABLE_IDS(MENUS_ID) SELECT DISTINCT  value FROM  F_Split(@MENU_IDS, ',')

			IF @AUTH_FLAG = 1
				BEGIN
					SET @R_ALLOW_FLAG = 1
					SET @R_NOT_ALLOW_FLAG = 0
				END
				ELSE IF @AUTH_FLAG = 2
				BEGIN
					SET @R_ALLOW_FLAG = 0
					SET @R_NOT_ALLOW_FLAG = 2
				END
				ELSE IF @AUTH_FLAG = 0
				BEGIN
					SET @R_ALLOW_FLAG = 0
					SET @R_NOT_ALLOW_FLAG = 0
				END

			IF NOT EXISTS (
			SELECT TOP 1 1 
			FROM 
				SmartOne2_VC.dbo.SMT_AUTH_PERMISSION WITH (NOLOCK) 
			WHERE 
				AUPE_PERMISSION_TYPE = @AUTH_PERMISSION_TYPE AND 
				AUPE_REF_OBJ_ID = @AUTH_PERMISSION_CONTENT
				and AUPE_AUTH_TYPE =@AUTH_TYPE
			)
			BEGIN

			   SET @AUPE_ID = NEWID();
				INSERT INTO SmartOne2_VC.dbo.SMT_AUTH_PERMISSION (
					ID,
					AUPE_REF_OBJ_ID,
					AUPE_PERMISSION_TYPE,
					AUPE_AUTH_TYPE,
					AUPE_AUTH_ALLOW,
					AUPE_AUTH_NOT_ALLOW,
					AUPE_R_ALLOW,
					AUPE_R_NOT_ALLOW,
					AUPE_W_ALLOW,
					AUPE_W_NOT_ALLOW,
					AUPE_STATE,
					AUPE_STRU_READONLY,
					CREATE_USER_ID,
					CREATE_DATE,
					PROJECT_CODE,
					TENANT_ID
				)
				VALUES
				(
					@AUPE_ID,
					@AUTH_PERMISSION_CONTENT,
					@AUTH_PERMISSION_TYPE,
					@AUTH_TYPE,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					1,
					@CREATE_USER_ID,
					@CREATE_DATE,
					@PROJECT_CODE,
					@TENANT_ID
				)
			END
			ELSE
			BEGIN
			   SELECT @AUPE_ID = ID FROM SMT_AUTH_PERMISSION WITH (NOLOCK) 
			   WHERE AUPE_REF_OBJ_ID = @AUTH_PERMISSION_CONTENT 
			   AND AUPE_PERMISSION_TYPE = @AUTH_PERMISSION_TYPE 
			   and AUPE_AUTH_TYPE =@AUTH_TYPE 
			END



			IF EXISTS(SELECT TOP 1 1 FROM @TABLE_IDS)
				BEGIN
					
					UPDATE SmartOne2_VC.dbo.SMT_AUTH_MENU  SET 
						AUFU_R_ALLOW = 0, 
						AUFU_R_NOT_ALLOW = 0
					WHERE AUFU_REF_OBJ_ID IN (SELECT MENUS_ID FROM @TABLE_IDS)
					AND AUPE_ID = @AUPE_ID


					IF @AUTH_FLAG = 1
					BEGIN
						SET @R_ALLOW_UPDATE_FLAG = 1
						SET @R_NOT_ALLOW_UPDATE_FLAG = 0
					END
					ELSE IF @AUTH_FLAG = 2
					BEGIN
						SET @R_ALLOW_UPDATE_FLAG = 0
						SET @R_NOT_ALLOW_UPDATE_FLAG = 2
					END
					
					UPDATE SmartOne2_VC.dbo.SMT_AUTH_MENU SET 
						AUFU_R_ALLOW = @R_ALLOW_UPDATE_FLAG, 
						AUFU_R_NOT_ALLOW = @R_NOT_ALLOW_UPDATE_FLAG
					WHERE AUFU_REF_OBJ_ID IN (SELECT MENUS_ID FROM @TABLE_IDS)
						AND AUPE_ID = @AUPE_ID
					

					INSERT INTO SmartOne2_VC.dbo.SMT_AUTH_MENU 
					(
						ID,
						AUFU_REF_OBJ_ID,
						AUFU_STATE,
						AUPE_ID,
						AUFU_ORDER,
						AUFU_R_ALLOW,
						AUFU_W_ALLOW,
						AUFU_AUTH_ALLOW,
						AUFU_AUTH_NOT_ALLOW,
						AUFU_R_NOT_ALLOW,
						AUFU_W_NOT_ALLOW,
						AUFU_AUTH_TYPE,
						AUFU_ENABLE_PERMISSION,
						AUFU_WEIGHT,
						AUFU_REMARK,
						CREATE_USER_ID,
						CREATE_DATE,
						PROJECT_CODE,
						TENANT_ID
					)
					SELECT 
						NEWID(),
						MENUS_ID,
						1,
						@AUPE_ID,
						NULL,
						@R_ALLOW_FLAG,
						0,
						0,
						0,
						@R_NOT_ALLOW_FLAG,
						0,
						'menu',
						1,
						1,
						NULL,
						@CREATE_USER_ID,
						@CREATE_DATE,
						@PROJECT_CODE,
						@TENANT_ID
					FROM @TABLE_IDS
					WHERE MENUS_ID NOT IN 
						(SELECT AUFU_REF_OBJ_ID FROM SmartOne2_VC.dbo.SMT_AUTH_MENU WITH(NOLOCK) where AUPE_ID = @AUPE_ID)
					
					SET @MESSAGE = '设置成功'
					SET @MESSAGE_TYPE = 'success'
					SET @MESSAGE_AUTH_FLAG = @AUTH_FLAG
				END
				ELSE 
				BEGIN
					SET @MESSAGE = '设置失败'
					SET @MESSAGE_TYPE = 'warning'
					SET @MESSAGE_AUTH_FLAG = -1
				END
			END
		]]>
	</procedure>
</mapping-configuration>